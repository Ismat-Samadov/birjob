// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models 
model jobs_jobpost {
  id         Int      @id @default(autoincrement())
  title      String
  company    String
  apply_link String
  source     String?
  created_at DateTime @default(now())
  notifications notifications[]

  @@unique([title, company, apply_link], name: "unique_job_listing")
}

model search_logs {
  id        Int      @id @default(autoincrement())
  query     String
  timestamp DateTime @default(now())
}

// User notification system models
model users {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  lastNotifiedAt       DateTime?
  keywords             keywords[]
  notifications        notifications[]
  sourcePreferences    sourcePreferences[]
}

model keywords {
  id        Int      @id @default(autoincrement())
  keyword   String
  userId    Int
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, keyword])
}

// Keep the scraper_errors table to prevent it from being dropped
model scraper_errors {
  id        Int      @id @default(autoincrement())
  source    String
  error     String
  timestamp DateTime @default(now())
}

// New model for source preferences
model sourcePreferences {
  id        Int      @id @default(autoincrement())
  userId    Int
  source    String
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, source])
}

// Notifications history
model notifications {
  id            Int      @id @default(autoincrement())
  userId        Int
  jobId         Int
  sentAt        DateTime @default(now())
  matchedKeyword String
  isRead        Boolean  @default(false)
  user          users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  job           jobs_jobpost @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobId])
}

// Contact form submissions
model contactSubmissions {
  id             Int      @id @default(autoincrement())
  name           String
  email          String
  message        String   @db.Text
  ip             String?
  userAgent      String?
  status         String   // "PENDING", "PROCESSED", "REPLIED", etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}