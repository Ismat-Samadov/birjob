generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model jobs_jobpost {
  id            Int             @id @default(autoincrement())
  title         String
  company       String
  apply_link    String
  source        String?
  created_at    DateTime        @default(now())
  notifications notifications[]

  @@unique([title, company, apply_link], name: "unique_job_listing")
}

model search_logs {
  id        Int      @id @default(autoincrement())
  query     String
  timestamp DateTime @default(now())
}

model users {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastNotifiedAt    DateTime?
  keywords          keywords[]
  notifications     notifications[]
  sourcePreferences sourcePreferences[]
}

model keywords {
  id        Int      @id @default(autoincrement())
  keyword   String
  userId    Int
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, keyword])
}

model scraper_errors {
  id        Int      @id @default(autoincrement())
  source    String
  error     String
  timestamp DateTime @default(now())
}

model sourcePreferences {
  id        Int      @id @default(autoincrement())
  userId    Int
  source    String
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, source])
}

model notifications {
  id             Int          @id @default(autoincrement())
  userId         Int
  jobId          Int
  sentAt         DateTime     @default(now())
  matchedKeyword String
  isRead         Boolean      @default(false)
  job            jobs_jobpost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user           users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobId])
}

model contactSubmissions {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  ip        String?
  userAgent String?
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id            Int                @id @default(autoincrement())
  slug          String             @unique
  title         String
  excerpt       String
  content       String
  author        String
  authorImage   String
  authorBio     String
  authorRole    String
  date          DateTime
  readTime      String
  category      String
  coverImage    String
  featured      Boolean            @default(false)
  trendingScore Int                @default(0)
  viewCount     Int                @default(0)
  likeCount     Int                @default(0)
  commentCount  Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  relatedPosts  BlogPostRelation[]
  tags          BlogPostTag[]
}

model BlogPostTag {
  id         Int      @id @default(autoincrement())
  name       String
  blogPostId Int
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, name])
}

model BlogPostRelation {
  id            Int      @id @default(autoincrement())
  blogPostId    Int
  relatedPostId Int
  blogPost      BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, relatedPostId])
}

// Updated visitor_logs model with all analytics fields
model visitor_logs {
  id              Int       @id @default(autoincrement())
  ip              String?
  visitorId       String?
  userAgent       String?
  browser         String?
  browserVersion  String?
  operatingSystem String?
  osVersion       String?
  deviceType      String?
  deviceVendor    String?
  deviceModel     String?
  country         String?
  city            String?
  region          String?
  timezone        String?
  language        String?
  referrer        String?
  path            String?
  query           String?
  screenWidth     Int?
  screenHeight    Int?
  colorDepth      Int?
  viewportWidth   Int?
  viewportHeight  Int?
  connectionType  String?
  connectionSpeed String?
  battery         Float?
  sessionId       String?
  previousVisitId Int?
  timestamp       DateTime  @default(now())
  
  // New analytics fields
  referrerDomain  String?
  referrerPath    String?
  referrerQuery   String?
  referrerProtocol String?
  referrerSource  String?
  searchKeywords  String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmContent      String?
  utmTerm         String?
  entryPage       String?
  landingTime     DateTime?

  @@index([timestamp])
  @@index([sessionId])
  @@index([ip])
  @@index([visitorId])
  @@index([referrerSource])
  @@index([utmSource, utmMedium, utmCampaign])
}
